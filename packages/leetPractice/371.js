// 不使用运算符 + 和 - ​​​​​​​，计算两整数 ​​​​​​​a 、b ​​​​​​​之和。

// 示例 1:

// 输入: a = 1, b = 2
// 输出: 3
// 示例 2:

// 输入: a = -2, b = 3
// 输出: 1






// 1.按位取与（&）
// 两值按二进制位进行 “与”运算

// 规则：0&0=0；0&1=0；1&0=0；1&1=1

// 举个栗子： a = 5  ,b = 3

// a：0101

// b：0011

// r：0001  

// 2.按位取或（|）
// 两值按二进制位进行 “或”运算
// 规则：0|0=0；0|1=1；1|0=1；1|1=1
// 举个栗子： a = 5  ,b = 3

// a：0101

// b：0011

// r：0111

// 3.按位取异或（^）
// 两值按二进制位进行 “异或”运算
// 规则：0^0=0；0^1=1；1^0=1；1^1=0
// 举个栗子： a = 5  ,b = 3

// a：0101

// b：0011

// r：0110

// 4.左移运算符“<<”及右移运算符“>>”
// 左移运算符" << n ":

// 将一个数的二进制位全部向左移n位,最左边一位舍弃，右边补0。

// 举个栗子： 

// a = 5

// a<<1

// 0101 -> 1010

// 左移一位后，a = a * 2 = 10；

// 右移运算符">>":
// 将一个数的二进制位全部向右移n位,最右边一位舍弃，左边补0。

// 举个栗子： 

// a = 5

// a>>1

// 0101 -> 0010

// 左移一位后，a = a / 2 = 2；


// 位运算
// 详情见js位运算符文档


/**
 * @param {number} a
 * @param {number} b
 * @return {number}
 */
var a = -2, b = 3;
var getSum = function(a, b) {
    if((a&b) == 0)  
        return a|b;  
    return getSum(a^b,(a&b)<<1);  
};
getSum(a,b)